AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-check-versions

  SAM Template for aws-check-versions

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60

Resources:
  RDSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBEngineVersions
                Resource: '*'
          PolicyName: LambdaRDSDescribe
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
          PolicyName: LambdaCloudwatchWrite

  ESLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - es:ListDomainNames
                  - es:DescribeElasticSearchDomain
                  - es:ListElasticsearchVersions
                Resource: '*'
          PolicyName: LambdaESDescribe
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
          PolicyName: LambdaCloudwatchWrite

  ECLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - elasticache:DescribeCacheClusters
                  - elasticache:DescribeCacheEngineVersions
                Resource: '*'
          PolicyName: LambdaECDescribe
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
          PolicyName: LambdaCloudwatchWrite

  MSKLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kafka:ListClusters
                  - kafka:ListConfigurations
                  - kafka:ListKafkaVersions
                Resource: '*'
          PolicyName: LambdaMSKDescribe
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
          PolicyName: LambdaCloudwatchWrite

  MQLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mq:ListBrokers
                  - mq:ListConfigurations
                  - mq:DescribeBroker
                  - mq:DescribeBrokerEngineTypes
                Resource: '*'
          PolicyName: LambdaMQDescribe
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
          PolicyName: LambdaCloudwatchWrite

  EKSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - eks:ListClusters
                Resource: '*'
          PolicyName: LambdaEKSDescribe
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
          PolicyName: LambdaCloudwatchWrite

  CombineLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Join [ '/', [!GetAtt VersionsS3Bucket.Arn, '*']]
          PolicyName: LambdaS3PutPolicy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
          PolicyName: LambdaCloudwatchWrite

  LambdaInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt VersionRdsFunction.Arn
                  - !GetAtt VersionEsFunction.Arn
                  - !GetAtt VersionEcFunction.Arn
                  - !GetAtt VersionDocDBFunction.Arn
                  - !GetAtt VersionEKSFunction.Arn
                  - !GetAtt VersionMSKFunction.Arn
                  - !GetAtt VersionMQFunction.Arn
                  - !GetAtt VersionCombineFunction.Arn
        - PolicyName: StepCloudwatchWrite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'

  StepFunctionInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StepFunctionInvokePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref VersionStateMachine

  LambdaStepInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaStepFunctionInvokePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref VersionStateMachine
        - PolicyName: LambdaWriteLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ScheduleStepFunctions:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Trigger Weekly for Step Function'
      ScheduleExpression: 'cron(0 6 ? * FRI *)'
      State: 'ENABLED'
      Targets:
        - Arn: !Ref VersionStateMachine
          Id: 'TargetVersionStateMachine'
          RoleArn: !GetAtt StepFunctionInvokeRole.Arn

  VersionsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  VersionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: version-dashboard-statemachine
      Type: EXPRESS
      Logging:
        Level: ERROR
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionLogGroup.Arn
      DefinitionUri: version_state_machine/version_state_machine.asl.json
      DefinitionSubstitutions:
        VersionRdsFunctionArn: !GetAtt VersionRdsFunction.Arn
        VersionEsFunctionArn: !GetAtt VersionEsFunction.Arn
        VersionDocDBFunctionArn: !GetAtt VersionDocDBFunction.Arn
        VersionEKSFunctionArn: !GetAtt VersionEKSFunction.Arn
        VersionMSKFunctionArn: !GetAtt VersionMSKFunction.Arn
        VersionMQFunctionArn: !GetAtt VersionMQFunction.Arn
        VersionEcFunctionArn: !GetAtt VersionEcFunction.Arn
        VersionCombineFunctionArn: !GetAtt VersionCombineFunction.Arn
      Role: !GetAtt LambdaInvokeRole.Arn

  StepFunctionLogGroup:
    Type: AWS::Logs::LogGroup

  VersionRdsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: version_rds/
      Handler: app.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RDSLambdaExecutionRole.Arn

  VersionEsFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: version_es/
        Handler: app.lambda_handler
        Runtime: python3.7
        Role: !GetAtt ESLambdaExecutionRole.Arn

  VersionEcFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: version_ec/
        Handler: app.lambda_handler
        Runtime: python3.7
        Role: !GetAtt ECLambdaExecutionRole.Arn

  VersionDocDBFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: version_docdb/
        Handler: app.lambda_handler
        Runtime: python3.7
        Role: !GetAtt RDSLambdaExecutionRole.Arn

  VersionMSKFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: version_msk/
        Handler: app.lambda_handler
        Runtime: python3.7
        Role: !GetAtt MSKLambdaExecutionRole.Arn

  VersionMQFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: version_mq/
        Handler: app.lambda_handler
        Runtime: python3.7
        Role: !GetAtt MQLambdaExecutionRole.Arn
  
  VersionEKSFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: version_eks/
        Handler: app.lambda_handler
        Runtime: python3.7
        Role: !GetAtt EKSLambdaExecutionRole.Arn

  InvokeVersionStep:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: invoke_version_step/
        Handler: app.lambda_handler
        Runtime: python3.7
        Environment:
          Variables:
            StepFunctionArn: !Ref VersionStateMachine
        Role: !GetAtt LambdaStepInvokeRole.Arn

  VersionCombineFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: version_combine/
        Handler: app.lambda_handler
        Runtime: python3.7
        Environment:
          Variables:
            s3BucketName: !Ref VersionsS3Bucket
        Role: !GetAtt CombineLambdaExecutionRole.Arn

  TriggerStepFunction:
    Type: Custom::TriggerStepFunction
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt InvokeVersionStep.Arn
      Region: !Ref 'AWS::Region'
      Version: '1.3'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  VersionsS3Bucket:
    Description: "S3 Bucket for latest version files"
    Value: !Ref VersionsS3Bucket
